// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Basket    Basket?
  Order     Order[]
  Coupon    Coupon[]
}

model Category {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  products    Product[]
}

model Product {
  id            Int          @id @default(autoincrement())
  title         String
  categoryId    Int
  category      Category     @relation(fields: [categoryId], references: [id])
  description   String
  price         Float
  stockQuantity Int
  origin        String
  roastLevel    String
  flavorNotes   String[]
  BasketItem    BasketItem[]
  OrderItem     OrderItem[]
  Campaign      Campaign[]
}

enum OrderStatus {
  PROCESSING
  PAYMENT_COMPLETED
  SHIPPED
  DELIVERED
}

model BasketItem {
  id        Int     @id @default(autoincrement())
  basketId  Int
  basket    Basket  @relation(fields: [basketId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  isGift    Boolean @default(false)
  quantity  Int
}

model Basket {
  id               Int          @id @default(autoincrement())
  user             User         @relation(fields: [userId], references: [id])
  userId           String       @unique
  items            BasketItem[]
  cargoPrice       Float        @default(0)
  subtotal         Float        @default(0)
  total            Float        @default(0)
  campaignDiscount Float        @default(0)
  couponDiscount   Float        @default(0)
  totalDiscount    Float        @default(0)
  Campaign         Campaign?    @relation(fields: [campaignId], references: [id])
  campaignId       Int?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  isGift    Boolean @default(false)
  quantity  Int
}

model Order {
  id               Int         @id @default(autoincrement())
  userId           String
  user             User        @relation(fields: [userId], references: [id])
  items            OrderItem[]
  cargoPrice       Float       @default(0)
  shippingAddress  String
  subTotal         Float       @default(0)
  total            Float       @default(0)
  status           OrderStatus @default(PROCESSING)
  campaignDiscount Float       @default(0)
  couponDiscount   Float       @default(0)
  totalDiscount    Float       @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Campaign {
  id            Int      @id @default(autoincrement())
  name          String
  discountPct   Float
  minAmount     Float
  giftProduct   Product? @relation(fields: [giftProductId], references: [id])
  giftProductId Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Basket        Basket[]
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  isActive    Boolean
  isPercent   Boolean
  discountPct Float
  discount    Float
  usageLimit  Int
  usageCount  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
}

model Settings {
  id                    Int      @id @default(autoincrement())
  cargoPrice            Float    @default(0)
  minAmountForFreeCargo Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
